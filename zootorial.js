// Generated by CoffeeScript 1.4.0
(function() {
  var $, Dialog, Step, Tutorial, attach, wait,
    __hasProp = {}.hasOwnProperty;

  $ = window.jQuery;

  wait = function(time, fn) {
    var _ref;
    if (typeof time === 'function') {
      _ref = [0, time], time = _ref[0], fn = _ref[1];
    }
    return setTimeout(fn, time);
  };

  attach = function(el, _arg, to, _arg1, _arg2) {
    var elSize, elX, elY, margin, newElOffset, positions, toOffset, toSize, toX, toY, _ref, _ref1;
    _ref = _arg != null ? _arg : [], elX = _ref[0], elY = _ref[1];
    _ref1 = _arg1 != null ? _arg1 : [], toX = _ref1[0], toY = _ref1[1];
    margin = (_arg2 != null ? _arg2 : {}).margin;
    el = $(el);
    if (el.length === 0) {
      throw new Error('Couldn\'t find an element to attach.');
    }
    if (to == null) {
      to = window;
    }
    to = $(to).filter(':visible').first();
    if (to.length === 0) {
      to = $(window);
    }
    if (margin == null) {
      margin = 0;
    }
    positions = {
      left: 0,
      center: 0.5,
      right: 1,
      top: 0,
      middle: 0.5,
      bottom: 1
    };
    if (elX == null) {
      elX = 'center';
    }
    if (elX in positions) {
      elX = positions[elX];
    }
    if (elY == null) {
      elY = 'middle';
    }
    if (elY in positions) {
      elY = positions[elY];
    }
    if (toX == null) {
      toX = 'center';
    }
    if (toX in positions) {
      toX = positions[toX];
    }
    if (toY == null) {
      toY = 'middle';
    }
    if (toY in positions) {
      toY = positions[toY];
    }
    toSize = {
      width: to.outerWidth() + (margin * 2),
      height: to.outerHeight() + (margin * 2)
    };
    toOffset = to.offset() || {
      left: 0,
      top: 0
    };
    toOffset.top -= margin;
    toOffset.left -= margin;
    elSize = {
      width: el.outerWidth(),
      height: el.outerHeight()
    };
    newElOffset = {
      left: toOffset.left - (elSize.width * elX) + (toSize.width * toX),
      top: toOffset.top - (elSize.height * elY) + (toSize.height * toY)
    };
    return el.offset(newElOffset);
  };

  Dialog = (function() {

    Dialog.prototype.header = '';

    Dialog.prototype.content = '';

    Dialog.prototype.buttons = null;

    Dialog.prototype.attachment = null;

    Dialog.prototype.destructionDelay = 500;

    Dialog.prototype.attachmentDelay = 60;

    Dialog.prototype.parent = 'body';

    Dialog.prototype.el = null;

    Dialog.prototype.headerContainer = null;

    Dialog.prototype.contentContainer = null;

    Dialog.prototype.buttonConatiner = null;

    Dialog.prototype.boundAttach = null;

    function Dialog(params) {
      var children, property, value,
        _this = this;
      if (params == null) {
        params = {};
      }
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this) {
          this[property] = value;
        }
      }
      this.buttons || (this.buttons = []);
      this.attachment || (this.attachment = {
        to: null,
        at: {}
      });
      this.el = $('<div class="zootorial-dialog">\n  <button name="close">&times;</button>\n  <div class="header"></div>\n  <div class="content"></div>\n  <div class="footer"></div>\n</div>');
      children = this.el.children();
      this.headerContainer = children.filter('.header');
      this.contentContainer = children.filter('.content');
      this.buttonConatiner = children.filter('.footer');
      this.el.on('click', 'button[name="close"]', function() {
        _this.el.trigger('exit-dialog');
        return _this.close();
      });
      this.render();
      this.el.css({
        display: 'none'
      });
      this.el.appendTo(this.parent);
    }

    Dialog.prototype.render = function() {
      var button, i, key, value, _i, _len, _ref, _ref1, _results;
      this.headerContainer.html(this.header);
      this.contentContainer.html(this.content);
      this.buttonConatiner.empty();
      _ref = this.buttons;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        button = _ref[i];
        if ((_ref1 = typeof button) === 'string' || _ref1 === 'number') {
          button = $("<button data-index='" + i + "'>" + button + "</button>");
        } else {
          for (key in button) {
            value = button[key];
            button = $("<button value='" + value + "'>" + key + "</button>");
          }
        }
        _results.push(this.buttonConatiner.append(button));
      }
      return _results;
    };

    Dialog.prototype.attach = function() {
      var _this = this;
      return wait(this.attachmentDelay, function() {
        var atPos, elPos, margin;
        elPos = [_this.attachment.x, _this.attachment.y];
        atPos = [_this.attachment.at.x, _this.attachment.at.y];
        margin = _this.attachment.margin || _this.attachment.at.margin;
        attach(_this.el, elPos, _this.attachment.to, atPos, {
          margin: margin
        });
        return _this.el.trigger('attach-dialog', [_this]);
      });
    };

    Dialog.prototype.open = function() {
      var _this = this;
      this.el.css({
        display: ''
      });
      return wait(function() {
        _this.el.removeClass('hidden');
        _this.attach();
        _this.boundAttach = function() {
          return _this.attach();
        };
        $(window).on('resize', _this.boundAttach);
        return _this.el.trigger('open-dialog', [_this]);
      });
    };

    Dialog.prototype.close = function() {
      var _this = this;
      this.el.addClass('hidden');
      return wait(this.destructionDelay, function() {
        _this.el.css({
          display: 'none'
        });
        $(window).off('resize', _this.boundAttach);
        _this.boundAttach = null;
        return _this.el.trigger('close-dialog', [_this]);
      });
    };

    Dialog.prototype.destroy = function() {
      var _this = this;
      return wait(this.destructionDelay, function() {
        _this.el.trigger('destroy-dialog', [_this]);
        _this.el.remove();
        return _this.el.off();
      });
    };

    return Dialog;

  })();

  Step = (function() {

    Step.prototype.className = '';

    Step.prototype.header = '';

    Step.prototype.content = '';

    Step.prototype.attachment = null;

    Step.prototype.buttons = null;

    Step.prototype.nextOn = null;

    Step.prototype.defaultButton = 'Continue';

    Step.prototype.block = '';

    Step.prototype.focus = '';

    Step.prototype.onEnter = null;

    Step.prototype.onExit = null;

    Step.prototype.tutorialNext = null;

    Step.prototype.blockers = null;

    Step.prototype.focusers = null;

    Step.prototype.started = null;

    function Step(params) {
      var button, property, value, _base, _ref, _ref1, _ref2, _ref3;
      if (params == null) {
        params = {};
      }
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this) {
          this[property] = value;
        }
      }
      if ((_ref = this.attachment) == null) {
        this.attachment = {
          to: null
        };
      }
      if ((_ref1 = (_base = this.attachment).at) == null) {
        _base.at = {};
      }
      if ((!this.buttons) && (!this.nextOn)) {
        button = {};
        button[this.defaultButton] = 'ZOOTORIAL_NEXT';
        this.buttons = [button];
        this.nextOn = {
          click: 'button[value="ZOOTORIAL_NEXT"]'
        };
      }
      if ((_ref2 = this.buttons) == null) {
        this.buttons = [];
      }
      if ((_ref3 = this.nextOn) == null) {
        this.nextOn = {
          click: '.tutorial.zootorial-dialog'
        };
      }
    }

    Step.prototype.createBlockers = function() {
      var blocked, blocker, _i, _len, _ref, _results;
      this.blockers = $();
      _ref = $(this.block);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        blocked = _ref[_i];
        blocked = $(blocked);
        blocker = $('<div class="hidden zootorial-blocker"></div>');
        blocker.width(blocked.outerWidth());
        blocker.height(blocked.outerHeight());
        blocker.offset(blocked.offset());
        _results.push(this.blockers = this.blockers.add(blocker));
      }
      return _results;
    };

    Step.prototype.createFocusers = function() {
      var above, bottom, focus, focuserMarkup, height, left, offset, right, totalHeight, totalWidth, width;
      focuserMarkup = '<div class="hidden zootorial-focuser"></div>';
      this.focusers = $(focuserMarkup + focuserMarkup + focuserMarkup + focuserMarkup);
      focus = $(this.focus).filter(':visible').first();
      if (focus.length === 0) {
        return;
      }
      offset = focus.offset();
      width = focus.outerWidth();
      height = focus.outerHeight();
      totalHeight = $('html').outerHeight();
      totalWidth = $('html').outerWidth();
      above = this.focusers.eq(0);
      above.offset({
        left: 0,
        top: 0
      });
      above.width('100%');
      above.height(offset.top);
      right = this.focusers.eq(1);
      right.offset({
        left: offset.left + width,
        top: offset.top
      });
      right.width(totalWidth - offset.left - width);
      right.height(height);
      bottom = this.focusers.eq(2);
      bottom.offset({
        left: 0,
        top: offset.top + height
      });
      bottom.width('100%');
      bottom.height(totalHeight - offset.top - height);
      left = this.focusers.eq(3);
      left.offset({
        left: 0,
        top: offset.top
      });
      left.width(offset.left);
      return left.height(height);
    };

    Step.prototype.enter = function(tutorial) {
      var eventName, extras, selector, _ref,
        _this = this;
      this.started = new Date;
      if (typeof this.onEnter === "function") {
        this.onEnter(tutorial, this);
      }
      if (this.className) {
        tutorial.dialog.el.addClass(this.className);
      }
      tutorial.dialog.header = this.header;
      tutorial.dialog.content = this.content;
      tutorial.dialog.buttons = this.buttons;
      tutorial.dialog.attachment = this.attachment;
      tutorial.dialog.render();
      tutorial.dialog.attach();
      this.tutorialNext = function() {
        _this.complete(tutorial);
        return tutorial.next();
      };
      _ref = this.nextOn;
      for (eventName in _ref) {
        selector = _ref[eventName];
        $(document).on(eventName, selector, this.tutorialNext);
      }
      this.createBlockers();
      this.createFocusers();
      extras = this.blockers.add(this.focusers);
      extras.appendTo(Step.parent);
      extras.css({
        position: 'absolute'
      });
      setTimeout($.proxy(extras, 'removeClass', 'hidden'), tutorial.dialog.attachmentDelay);
      return tutorial.dialog.el.trigger('enter-tutorial-step', [tutorial.step, this, tutorial]);
    };

    Step.prototype.complete = function(tutorial) {
      var finished;
      finished = (new Date) - this.started;
      return tutorial.dialog.el.trigger('complete-tutorial-step', [
        tutorial.step, this, tutorial, {
          finished: finished
        }
      ]);
    };

    Step.prototype.exit = function(tutorial) {
      var eventName, extras, finished, selector, _ref;
      if (typeof this.onExit === "function") {
        this.onExit(tutorial, this);
      }
      if (this.className) {
        tutorial.dialog.el.removeClass(this.className);
      }
      _ref = this.nextOn;
      for (eventName in _ref) {
        selector = _ref[eventName];
        $(document).off(eventName, selector, this.tutorialNext);
      }
      extras = this.blockers.add(this.focusers);
      extras.addClass('hidden');
      setTimeout($.proxy(extras, 'remove'), tutorial.dialog.attachmentDelay);
      finished = (new Date) - this.started;
      return tutorial.dialog.el.trigger('exit-tutorial-step', [
        tutorial.step, this, tutorial, {
          finished: finished
        }
      ]);
    };

    return Step;

  })();

  Tutorial = (function() {

    Tutorial.Step = Step;

    Tutorial.prototype.title = 'Untitled';

    Tutorial.prototype.steps = null;

    Tutorial.prototype.step = -1;

    Tutorial.prototype.parent = 'body';

    Tutorial.prototype.started = null;

    function Tutorial(params) {
      var property, value,
        _this = this;
      if (params == null) {
        params = {};
      }
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this) {
          this[property] = value;
        }
      }
      this.dialog = new Dialog(params);
      this.dialog.el.addClass('tutorial');
      this.dialog.el.on('close-dialog', function() {
        return _this.end();
      });
      Step.parent = this.parent;
    }

    Tutorial.prototype.start = function() {
      this.started = new Date;
      this.goTo(0);
      this.dialog.open();
      return this.dialog.el.trigger('start-tutorial', [this]);
    };

    Tutorial.prototype.next = function() {
      return this.goTo(this.step + 1);
    };

    Tutorial.prototype.goTo = function(step) {
      var _ref;
      if ((_ref = this.steps[this.step]) != null) {
        _ref.exit(this);
      }
      this.step = step;
      if (this.steps[this.step]) {
        return this.steps[this.step].enter(this);
      } else {
        return this.complete();
      }
    };

    Tutorial.prototype.complete = function() {
      var finished;
      finished = new Date - this.started;
      this.dialog.close();
      return this.dialog.el.trigger('complete-tutorial', [
        this, {
          finished: finished
        }
      ]);
    };

    Tutorial.prototype.end = function() {
      var finished, onStep, _ref;
      finished = new Date - this.started;
      onStep = Math.min(this.step, this.steps.length - 1);
      if ((_ref = this.steps[this.step]) != null) {
        _ref.exit(this);
      }
      this.step = -1;
      this.started = null;
      return this.dialog.el.trigger('end-tutorial', [
        this, {
          onStep: onStep,
          finished: finished
        }
      ]);
    };

    return Tutorial;

  })();

  window.zootorial = {
    attach: attach,
    Dialog: Dialog,
    Step: Step,
    Tutorial: Tutorial
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = window.zootorial;
  }

  if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(window.zootorial);
  }

}).call(this);
